
// Roman to int cases

// Valid

test("TC-1", function(assert) {
  assert.propEqual(convertRomanToInteger("MMMCMXCIX"), {value: 3999, message: "", result: true}, "TC-1");
});
test("TC-2", function(assert) {
  assert.propEqual(convertRomanToInteger("CMXCIX"), {value: 999, message: "", result: true}, "TC-2");
});
test("TC-3", function(assert) {
  assert.propEqual(convertRomanToInteger("XC"), {value: 90, message: "", result: true}, "TC-3");
});
test("TC-4", function(assert) {
  assert.propEqual(convertRomanToInteger("IX"), {value: 9, message: "", result: true}, "TC-4");
});
test("TC-5", function(assert) {
  assert.propEqual(convertRomanToInteger("I"), {value: 1, message: "", result: true}, "TC-5");
});

// Not valid

test("TC 6", function(assert) {
  assert.propEqual(convertRomanToInteger("TEST"), {value: 0, message: "Please enter a valid roman", result: false}, "TC 6");
});
test("TC 7", function(assert) {
  assert.propEqual(convertRomanToInteger(""), {value: 0, message: "Please enter a valid roman", result: false}, "TC 7");
});
test("TC 8", function(assert) {
  assert.propEqual(convertRomanToInteger("111"), {value: 0, message: "Please enter a valid roman", result: false}, "TC 9");
});
test("TC 9", function(assert) {
  assert.propEqual(convertRomanToInteger("IIX"), {value: 0, message: "Please enter a valid roman", result: false}, "TC 9");
});
test("TC 10", function(assert) {
  assert.propEqual(convertRomanToInteger("IIX"), {value: 0, message: "Please enter a valid roman", result: false}, "TC 10");
});

// Int to roman cases

// Valid

test("TC 11", function(assert) {
  assert.propEqual(convertIntegerToRoman(1), {value: "I", message: "", result: true}, "TC 11");
});

test("TC 12", function(assert) {
  assert.propEqual(convertIntegerToRoman(9), {value: "IX", message: "", result: true}, "TC 12");
});

test("TC 13", function(assert) {
  assert.propEqual(convertIntegerToRoman(90), {value: "XC", message: "", result: true}, "TC 13");
});

test("TC 14", function(assert) {
  assert.propEqual(convertIntegerToRoman(999), {value: "CMXCIX", message: "", result: true}, "TC 14");
});

test("TC 15", function(assert) {
  assert.propEqual(convertIntegerToRoman(3999), {value: "MMMCMXCIX", message: "", result: true}, "TC 15");
});

// Not Valid

test("TC 16", function(assert) {
  assert.propEqual(convertIntegerToRoman("TEST"), {value: 0, message: "Please enter a valid integer", result: false}, "TC 16");
});

test("TC 17", function(assert) {
  assert.propEqual(convertIntegerToRoman(0), {value: 0, message: "Out of range (1-3999)", result: false}, "TC 17");
});

test("TC 18", function(assert) {
  assert.propEqual(convertIntegerToRoman(-1), {value: 0, message: "Please enter a valid integer", result: false}, "TC 18");
});

test("TC 19", function(assert) {
  assert.propEqual(convertIntegerToRoman(0.5), {value: 0, message: "Please enter a valid integer", result: false}, "TC 19");
});



// Extra cases

test("TC 20", function(assert) {
  assert.propEqual(convertRomanToInteger{value: 0, message: "Please enter a valid roman", result: false}, "TC 20");
});

// Considering we get an error for the lenght of the message i'll add some more test cases with less number of I to see if it only fails because of the lenght or it 
// doesnt support multiple same characters

test("TC 21", function(assert) {
  assert.propEqual(convertRomanToInteger("IIII"), {value: 0, message: "Please enter a valid roman", result: false}, "TC 21");
});

// One extra test case to test is IL, this would be suposed to be 49, however IL is not valid in roman numbers, so let's test it

test("TC 22", function(assert) {
  assert.propEqual(convertRomanToInteger("IL"), {value: 0, message: "Please enter a valid roman", result: false}, "TC 22");
});

// Let's try the other way, using XLIX which is the correct way of writing 49 in roman numbers

test("TC 23", function(assert) {
  assert.propEqual(convertRomanToInteger("XLIX"), {value: 49, message: "", result: true}, "TC 23");
});

// And finnally let's see how the program convers 49 to roman

test("TC 24", function(assert) {
  assert.propEqual(convertIntegerToRoman(49), {value: "XLIX", message: "", result: true}, "TC 24");
});

